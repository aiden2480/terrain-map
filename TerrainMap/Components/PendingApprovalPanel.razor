<MudExpansionPanel Text="@PanelText" ExpandedChanged="ExpandedChanged" HideIcon>
    <TitleContent>
        <ApprovalPanelTitleContent PanelTitle="@PanelText" BadgeVisible="CanActionApproval" Icon="TerrainApprovalService.GetApprovalDescriptionAndSvg(Approval).Icon" />
    </TitleContent>

    <ChildContent>
        @if (DataIsLoaded)
        {
            <div class="center-text-div">
                <p>Submitted by <b>@Approval.Member.FirstName @Approval.Member.LastName</b> on <b>@Approval.Submission.Date.ToString("ddd d MMM yyyy")</b>.</p>
                <p>This submission has <b>@ApproveCount</b> @PluralApproveText and <b>@ImproveCount</b> @PluralImproveText.</p>
            </div>

            <MudDivider DividerType="DividerType.Middle" Class="mt-2 mb-2" />

            @foreach (var input in Inputs)
            {
                <MudTooltip Text="@input.DialogText" Arrow="true" Placement="Placement.Top" Delay="750">
                    <MudText><b>@input.Label</b></MudText>
                </MudTooltip>

                <div class="mb-2">
                    @GetRenderFragment(input)
                </div>
            }

            if (CanActionApproval)
            {
                <div class="action-buttons-div mt-1">
                    <MudTextField Label="Add optional comment"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Clearable="true"
                                  Immediate="true"
                                  @bind-Value="comment" />

                    <MudIconButton Color="Color.Primary"
                                   OnClick="ImproveAchievement"
                                   Icon="@Icons.Material.Filled.Replay" />

                    <MudIconButton Color="Color.Primary"
                                   OnClick="ApproveAchievement"
                                   Icon="@Icons.Material.Filled.Check" />
                </div>
            }
            else if (SubmittedByCurrentUser)
            {
                <MudDivider DividerType="DividerType.Middle" Class="mt-2 mb-2" />
                <MudText Style="text-align: center"><i>You cannot action your own approval</i></MudText>
            }
            else if (AlreadyActionedByCurrentUser)
            {
                <MudDivider DividerType="DividerType.Middle" Class="mt-2 mb-2" />
                <MudText Style="text-align: center"><i>You have already actioned this approval</i></MudText>
            }
        }
        else
        {
            // Data is loaded by ExpandedChanged, this is displayed in the interim
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }
    </ChildContent>
</MudExpansionPanel>

@code {
    RenderFragment GetRenderFragment(ApprovalInput input)
    {
        var answer = (System.Text.Json.JsonElement?)Achievement.Answers.GetValueOrDefault(input.Id);

        if (answer is null)
        {
            return @<MudText><i>No response provided</i></MudText>;
        }

        var answerString = answer?.GetString() ?? string.Empty;
        return input.Type switch
        {
            "text_input" => TextInput(answerString),
            "checkbox" => VerifiableCheckbox(),
            "verifiable_checkbox" => VerifiableCheckbox(),
            "radio" => Radio(input.Selections!, answerString),
            "single_tab_selector" => SingleTabSelector(input.Selections!, answerString),
            "multi_tab_selector" => MultiTabSelector(input.Tabs!.SelectMany(t => t.Selections), answer?.EnumerateArray().Select(e => e.GetString()).ToList()!),

            _ => UnknownInputType(input.Type)
        };
    }

    RenderFragment TextInput(string answer)
        => @<MudText>@answer</MudText>;

    RenderFragment VerifiableCheckbox()
        => @<MudCheckBox Disabled="true" Value="true" Label="Requirement marked as fulfilled" Size="Size.Small" />;

    RenderFragment UnknownInputType(string inputType)
        => @<MudText><i>Unknown input type @inputType</i></MudText>;

    RenderFragment Radio(IEnumerable<ApprovalInputSelection> selections, string answer)
        => @<MudRadioGroup Value="answer">
                @foreach (var answer in selections)
                {
                    <MudRadio Value="@answer.Id" Disabled="true">@answer.Title</MudRadio>
                }
            </MudRadioGroup>;

    RenderFragment SingleTabSelector(IEnumerable<ApprovalInputSelection> selections, string answer)
        => TextInput(selections.Single(s => s.Id == answer).Title);

    RenderFragment MultiTabSelector(IEnumerable<ApprovalInputSelection> selections, IEnumerable<string> answers)
        => @<div>
            @foreach (var answer in answers)
            {
                <MudCheckBox Disabled Value="true" Label="@selections.Single(a => a.Id == answer).Title" Size="Size.Small" />
            }
        </div>;
}
